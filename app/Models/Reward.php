<?php

namespace App\Models;

use Astrotomic\Translatable\Translatable;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;
use Spatie\Translatable\HasTranslations;

class Reward extends Model
{
    use SoftDeletes;
    use HasTranslations;

    public $translatable = ['name'];
    protected $table = 'rewards';
    protected $guarded = [];

    protected static function boot()
    {
        parent::boot(); //  Change the autogenerated stub
        static::addGlobalScope('orderedBy', function (Builder $builder) {
            $builder->orderBy('rewards.ordered')->latest('updated_at');
        });
        if (request()->is('api/*')) {
            static::addGlobalScope('notDraft', function (Builder $builder) {
                $builder->where('rewards.draft', false);
            });
        }

    }

    public function branch()
    {
        return $this->belongsTo(Branch::class, 'branch_id', 'id');
    }

 public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    public function merchant()
    {
        return $this->belongsTo(Merchant::class, 'merchant_id', 'id');
    }

//scopes
    public function scopeCurrentMerchant($query, $merchant_id)
    {
        $query->where('merchant_id', $merchant_id);
    }

    public function scopeCurrentBranch($query, $branch_id)
    {
        $query->where('branch_id', $branch_id);
    }

    public function scopeNotDraft($query)
    {
        return $query->where('draft', false);
    }

    public function scopeMerchantType($query, $merchant_type_id)
    {
        return $query->whereHas('branch', function ($q) use ($merchant_type_id) {
            $q->whereHas('merchant', function ($qq) use ($merchant_type_id) {
                $qq->where('merchant_type_id', $merchant_type_id);
            });
        });
    }

    public function getImageAttribute($value)
    {
        return is_null($value) ? defualtImage() : asset($value);
    }

    public function getActionButtonsAttribute()
    {
        if (Auth::guard('manager')->check()) {
            $button = '';
            $button .= '<a href="' . route('manager.classification.edit', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-pencil"></i></a> ';
            $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#deleteModel" class="deleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';
            return $button;
        } elseif (Auth::guard('merchant')->check()) {
            $button = '';
            $button .= '<a href="' . route('restaurant.classification.edit', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-pencil"></i></a> ';
            $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#deleteModel" class="deleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';
            return $button;
        } elseif (Auth::guard('branch')->check()) {
            $button = '';
            $button .= '<a href="' . route('branch.classification.edit', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-pencil"></i></a> ';
            $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#deleteModel" class="deleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';
            return $button;
        }

    }
}
