<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;

class Order extends Model
{
    use SoftDeletes;

    protected static function boot()
    {
        parent::boot(); //  Change the autogenerated stub
        static::addGlobalScope('orderedBy', function (Builder $builder) {
            $builder->orderBy('ordered')->latest('updated_at');
        });
        if (request()->is('api/*')) {
            static::addGlobalScope('notDraft', function (Builder $builder) {
                $builder->where('draft', false);
            });
        }

    }

    protected $guarded = [];

    public const status = [
        'WORKING' => 1,
        'READY' => 2,
        'LATE_ORDER' => 3,
        'COMPLETED' => 4,
    ];
    public const RECEIVING = 1;
    public const EMPLOYEE_ON_WAY = 2;
    public const ON_PROGRESS = 3;
    public const DRIVER_ON_WAY = 4;
    public const READY = 5;
    public const COMPLETED = 6;
    public const CANCELED = 7;
    public const CLIENT_ON_WAY = 8;
    //paid_type visa|wallet
    public const ONLINE = 1;
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function status_time_lines()
    {
        return $this->hasMany(OrderStatusTimeLine::class, 'order_id', 'id');
    }

    public function branch()
    {
        return $this->belongsTo(Branch::class);
    }

    public function merchant()
    {
        return $this->belongsTo(Merchant::class);
    }

    public function order_items()
    {
        return $this->hasMany(OrderItem::class);
    }


    //    Scopes
    public function scopeWorkingOrder($query)
    {
        return $query->where('status', self::status['WORKING']);
    }

    public function scopeMerchantType($query, $merchant_type_id)
    {
        return $query->whereHas('branch', function ($q) use ($merchant_type_id) {
            $q->whereHas('merchant', function ($qq) use ($merchant_type_id) {
                $qq->where('merchant_type_id', $merchant_type_id);
            });
        });
    }

    public function scopeCurrentUser($query, $user_id)
    {
        return $query->where('user_id', $user_id);
    }

    public function scopeCurrentMerchant($query, $merchant_id)
    {
        return $query->whereHas('branch', function ($query) use ($merchant_id) {
            $query->where('merchant_id', $merchant_id);
        });
    }

    public function scopeCurrentBranch($query, $branch_id)
    {
        $query->where('branch_id', $branch_id);
    }

    public function scopeCompleted($query)
    {
        $query->where('status', self::status['COMPLETED']);
    }


    public function scopeReady($query)
    {
        $query->where('status', self::status['READY']);
    }
    public function scopeLate($query)
    {
        $query->where('status', self::status['LATE_ORDER']);
    }
    public function scopeWorking($query)
    {
        $query->where('status', self::status['WORKING']);
    }

    public function scopeNotCompleted($query)
    {
        $query->where('status', '<>', self::status['COMPLETED']);
    }


//    attributes
    public function getStatusNameAttribute()
    {
        switch ($this->status) {
            case self::status['WORKING']:
                return api('Working');
            case self::status['READY']:
                return api('Ready');
            case self::status['LATE_ORDER']:
                return api('Late Order');
            case self::status['COMPLETED']:
                return api('Completed');
            default:
                return api('unknown status');
        }
    }

    public function getTimeNeededAttribute()
    {
//        $time_needed_ms = abs(Carbon::parse($this->created_at)->timestamp - Carbon::parse($this->pick_up_time)->timestamp);
//        $days = Carbon::parse($this->created_at)->diffInDays($this->pick_up_time);
//        $hrs = Carbon::parse($this->created_at)->diffInHours($this->pick_up_time);
//        $seconds = Carbon::parse($this->created_at)->diffInMinutes($this->pick_up_time);
        $datetime1 = new \DateTime($this->pick_up_time);
        $datetime2 = new \DateTime($this->created_at);
        $interval = $datetime1->diff($datetime2);
        return $interval->format('%d')."d, ".$interval->format('%h')."h, ".$interval->format('%m')."m";
//        return $days . 'd,' . $hrs . 'h,' . $seconds . 'm';
    }

    public function getActionButtonsAttribute()
    {
        $button = '';
        if ($this->status != self::CANCELED && $this->status != self::COMPLETED && $this->status != self::READY)
            $button .= '<button type="button" data-status="' . $this->status . '" data-id="' . $this->id . '" data-toggle="modal" data-target="#statusModel" class="statusRecord btn btn-icon btn-danger"><i class="la la-refresh"></i></button>';


        if (Auth::guard('manager')->check()) {
            $button .= ' <a href="' . route('manager.order.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
            return $button;
        } elseif (Auth::guard('merchant')->check()) {
            $button .= ' <a href="' . route('restaurant.order.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
            return $button;
        } elseif (Auth::guard('branch')->check()) {
            $button .= ' <a href="' . route('branch.order.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
            return $button;
        }

    }

    protected $casts = [
        'lat' => 'double',
        'lng' => 'double',
        'isRated' => 'boolean',
        'all_order_object_filled_out' => 'boolean',
    ];

}
