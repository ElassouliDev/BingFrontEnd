<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Auth;
use Spatie\Permission\Traits\HasRoles;
use Spatie\Translatable\HasTranslations;

class Branch extends Authenticatable
{
    use Notifiable, SoftDeletes, HasTranslations, HasRoles;

    public $translatable = ['name', 'address'];
    protected $table = 'branches';
    protected $guarded = [];

    //    User status type
    public const ACTIVE = 1;
    public const NOT_ACTIVE = 2;

    protected static function boot()
    {
        parent::boot(); //  Change the autogenerated stub
        static::addGlobalScope('orderedBy', function (Builder $builder) {
            $builder->latest('branches.updated_at');
        });
        if (request()->is('api/*')) {
            static::addGlobalScope('notDraft', function (Builder $builder) {
                $builder->where('branches.draft', false)
                    ->where('branches.accepted', true)
                    ->whereHas('merchant')
                    ->where('branches.status', self::ACTIVE);
            });
        }
    }

    public function pointsPrivacy()
    {
        return $this->hasOne(BranchPointsPrivacy::class);

    }

    public function employees()
    {
        return $this->hasMany(User::class, 'branch_id');
    }

    public function rewards()
    {
        return $this->hasMany(Reward::class, 'branch_id');
    }

    public function offers()
    {
        return $this->hasMany(Offer::class, 'branch_id');
    }

    public function classifications()
    {
        return $this->hasMany(Classification::class, 'branch_id');
    }

    public function items()
    {
        return $this->hasMany(Item::class, 'branch_id');
    }

    public function merchant()
    {
        return $this->belongsTo(Merchant::class);
    }

    public function city()
    {
        return $this->belongsTo(City::class);
    }

    public function orders()
    {
        return $this->hasMany(Order::class);
    }


    public function points()
    {
        return $this->hasMany(UserMerchantPoints::class, 'branch_id', 'id');
    }

    public function hours()
    {
        return $this->hasMany(BranchHour::class, 'branch_id', 'id');
    }

    //    attributes

    public function getStatusNameAttribute()
    {
        switch ($this->status) {
            case self::ACTIVE:
                return api('active');

            case self::NOT_ACTIVE:
                return api('not active');
            default:
                return api('unknown status');
                break;
        }
    }

    public function getPointAttribute()
    {
        return $this->points()->where('user_id', apiUser()->id)->first();
    }

    public function getOpenAttribute()
    {
        $weekMap = [
            0 => 'SU',
            1 => 'MO',
            2 => 'TU',
            3 => 'WE',
            4 => 'TH',
            5 => 'FR',
            6 => 'SA',
        ];
        $dataWeekMap = [
            'SA' => 1,
            'SU' => 2,
            'MO' => 3,
            'TU' => 4,
            'WE' => 5,
            'TH' => 6,
            'FR' => 7,
        ];
        $dayOfTheWeek = Carbon::now()->dayOfWeek;
        $weekday = $weekMap[$dayOfTheWeek];
        $number_day = $dataWeekMap[$weekday];
        $available = BranchHour::query()->where('branch_id', $this->id)->where('day', $number_day)->first();
        if ($available) {
            if (time() >= strtotime($available->from) && time() <= strtotime($available->to)) {
                return 1;
            } else {
                return 0;
            }
        } else {
            return 0;
        }
    }

    public function getImageAttribute($value)
    {
        return is_null($value) ? asset_public('cover_image.png') : asset_public($value);
    }

    public function getCoverAttribute($value)
    {
        return is_null($value) ? asset_public('cover_image.png') : asset_public($value);
    }


    public function getDistanceAttribute()
    {
//        dd($this->lat, $this->lng, request()->get('lat'), request()->get('lng'));
        return (double)number_format((distance($this->lat, $this->lng, request()->get('lat'), request()->get('lng'), 'K')), DECIMAL_DIGIT_NUMBER, DECIMAL_SEPARATOR, DIGIT_THOUSANDS_SEPARATOR);
    }

    public function getActionButtonsAttribute()
    {
        if (Auth::guard('manager')->check()) {
            $button = '';
            $button .= '<a href="' . route('manager.branch.edit', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-pencil"></i></a> ';
            $button .= '<a href="' . route('manager.branch.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
            $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#deleteModel" class="deleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';
            return $button;
        } elseif (Auth::guard('merchant')->check()) {
            $button = '';
            $button .= '<a href="' . route('restaurant.branch.edit', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-pencil"></i></a> ';
            $button .= '<a href="' . route('restaurant.branch.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
            $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#deleteModel" class="deleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';
            return $button;
        }
    }


//    scopes
    public function scopeActive($query)
    {
        return $query->where('status', self::ACTIVE);
    }

    public function scopeNotMainBranch($query)
    {
        return $query->where('isMainBranch', false);
    }

    public function scopeMainBranch($query)
    {
        return $query->where('isMainBranch', true);
    }

    public function scopeNotDraft($query)
    {
        return $query->where('draft', false);
    }

    public function scopeCurrentMerchant($query, $merchant_id)
    {
        return $query->where('merchant_id', $merchant_id);
    }

    public function scopeNearest($query)
    {
        $lat = apiUser()->lat;
        $lng = apiUser()->lng;
        $merchants_range = optional(getSettings('merchants_range'))->value;
        return $query->when($lat && $lng, function ($query) use ($lat, $lng, $merchants_range) {
            $query
                ->selectRaw("branches.*,ROUND(6371 * acos( cos( radians({$lat}) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians({$lng}) ) + sin( radians({$lat}) ) * sin(radians(lat)) ) ) AS distance")
                ->having("distance", "<", $merchants_range)
                ->orderBy('distance', "ASC");
        });
    }

    public function scopeMerchantType($query, $merchant_type_id)
    {
        return $query->whereHas('merchant', function ($q) use ($merchant_type_id) {
            $q->where('merchant_type_id', $merchant_type_id);
        });
    }

    protected $casts = [
        'isMainBranch' => 'boolean',
        'isOpen' => 'boolean',
    ];

}
