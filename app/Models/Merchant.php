<?php

namespace App\Models;

use App\Notifications\ManagerResetPassword;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Spatie\Permission\Traits\HasRoles;
use Spatie\Translatable\HasTranslations;

class Merchant extends Authenticatable
{
//    provider == restaurant == merchant
    use Notifiable, HasRoles, HasTranslations;
    public $translatable = ['name'];
    protected $guarded = [];

    protected $hidden = [
        'password', 'remember_token',
    ];


    protected static function boot()
    {
        parent::boot(); //  Change the autogenerated stub
        static::addGlobalScope('orderedBy', function (Builder $builder) {
            $builder->orderBy('ordered')->latest('updated_at');
        });

        if (!request()->is('manager/restaurant') && !request()->is('manager/restaurant/*')) {
            static::addGlobalScope('notDraft', function (Builder $builder) {
                $builder->where('merchants.draft', false)
                    ->where('merchants.accepted', true)->where('merchants.status', self::ACTIVE);
            });
        }

    }

//    User status type
    public const ACTIVE = 1;
    public const NOT_ACTIVE = 2;

//    relations
    public function branches()
    {
        return $this->hasMany(Branch::class, 'merchant_id', 'id');
    }

    public function classifications()
    {
        return $this->hasMany(Classification::class, 'merchant_id', 'id');
    }

    public function items()
    {
        return $this->hasMany(Item::class, 'merchant_id', 'id');
    }

    public function payments()
    {
        return $this->hasMany(Payment::class);
    }


    public function coupons()
    {
        return $this->hasMany(Coupon::class, 'merchant_id', 'id');
    }

    public function merchantType()
    {
        return $this->belongsTo(MerchantType::class, 'merchant_type_id', 'id');
    }

    public function city()
    {
        return $this->belongsTo(City::class, 'city_id', 'id');
    }


//    scopes
    public function scopeActive($query)
    {
        return $query->where('status', self::ACTIVE);
    }

    public function scopeNotDraft($query)
    {
        return $query->where('draft', false);
    }


//    attributes

    public function getStatusNameAttribute()
    {
        switch ($this->status) {
            case self::ACTIVE:
                return api('active');

            case self::NOT_ACTIVE:
                return api('not active');
            default:
                return api('unknown status');
                break;
        }
    }

    public function getActionButtonsAttribute()
    {
        $button = '';
        $button .= '<a href="' . route('manager.restaurant.edit', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-pencil"></i></a> ';
        $button .= '<a href="' . route('manager.restaurant.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
        $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#deleteModel" class="deleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';
        return $button;
    }

    public function getUnreadNotificationsAttribute()
    {
        return $this->unreadNotifications()->count();
    }


//    functions
    public function sendPasswordResetNotification($token)
    {
        $this->notify(new ManagerResetPassword($token));
    }

    public function setLanguage()
    {
        $locale = $this->local ?? config("app.fallback_locale");
        app()->setLocale($locale);
    }


}
